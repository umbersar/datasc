help
install.packages("hydroGOF")
obs <- 1:10
sim <- 1:10
KGE(sim, obs)
library(hydroGOF)
obs <- 1:10
sim <- 1:10
KGE(sim, obs)
obs <- 1:10
sim <- 2:11
KGE(sim, obs)
obs <- 1:10
sim <- 2:11
KGE(sim, obs,method="2012")
library(hydroGOF)
obs <- 1:10
sim <- 1:10
KGE(sim, obs)
obs <- 1:10
sim <- 2:11
KGE(sim, obs)#,method="2012")
df = read.table("C:/CT Reach (for Geoff)/03 Chashma Taunsa Reach/Book1.csv", header = FALSE)
View(df)
df = read.table("C:/CT Reach (for Geoff)/03 Chashma Taunsa Reach/Book1.csv", header = FALSE)
df = read.csv("C:/CT Reach (for Geoff)/03 Chashma Taunsa Reach/Book1.csv", header = FALSE)
df[v1]
df[0]
obs <- df[0]
obs <- df[0]
sim <- df[1]
KGE(sim, obs)#,method="2012")
df[0]
df[0][0]
obs <- 1:10
nrow(df)
ncol
ncol(df)
df$V1
obs <- df$V1
sim <- df$V2
KGE(sim, obs)#,method="2012")
obs <- df$V1
sim <- df$V2
KGE(sim, obs)#,method="2012")
obs <- df$V1
sim <- df$V2
KGE(sim, obs)#,method="2012")
obs <- 1:10
sim <- 2:11
KGE(sim, obs)#,method="2012")
library(hydroGOF)
obs <- 1:10
sim <- 1:10
KGE(sim, obs)
obs <- 1:10
sim <- 2:11
KGE(sim, obs)#,method="2012")
obs <- 1:10
sim <- 9:18
KGE(sim, obs)#,method="2012")
obs <- 1:10
sim <- 5:14
KGE(sim, obs)#,method="2012")
library("zoo", lib.loc="~/r/win-library/3.2")
install.packages("zoo")
install.packages("hydroGOF")
install.packages("zoo")
library("zoo", lib.loc="~/r/win-library/3.3")
detach("package:zoo", unload=TRUE)
library("zoo")
libdata
.libPaths()
.libPaths()
install.packages(c("hydroGOF", "zoo"))
.libPaths()
.libPaths("C:/Users/sin17h/Documents/r/win-library/3.3")
.libPaths()
library("plyr", lib.loc="~/r/win-library/3.3")
library(zoo)
detach("package:plyr", unload=TRUE)
zoo()
detach("package:zoo", unload=TRUE)
zoo()
library("zoo", lib.loc="~/r/win-library/3.3")
.libPaths()
detach("package:zoo", unload=TRUE)
install.packages("zoo")
library("zoo", lib.loc="~/r/win-library/3.3")
library("xts", lib.loc="~/r/win-library/3.3")
library("spacetime", lib.loc="~/r/win-library/3.3")
library("sp", lib.loc="~/r/win-library/3.3")
library("Rcpp", lib.loc="~/r/win-library/3.3")
library("plyr", lib.loc="~/r/win-library/3.3")
detach("package:zoo", unload=TRUE)
detach("package:xts", unload=TRUE)
detach("package:spacetime", unload=TRUE)
detach("package:sp", unload=TRUE)
detach("package:Rcpp", unload=TRUE)
detach("package:plyr", unload=TRUE)
library("hydroGOF", lib.loc="~/r/win-library/3.3")
detach("package:hydroGOF", unload=TRUE)
.libPaths()
period<-as.character(seq(start.date, end.date, by=1))
date
syear<-"1983"
eyear<-"2101"
start.date.str<-paste0(syear, "-01-01")
end.date.str<-paste0(eyear, "-12-31")
period<-as.character(seq(start.date, end.date, by=1))
start.date<-as.Date(start.date.str, "%Y-%m-%d")
end.date<-as.Date(end.date.str, "%Y-%m-%d")
period<-as.character(seq(start.date, end.date, by=1))
syear<-"1983"
eyear<-"2102"
start.date.str<-paste0(syear, "-01-01")
end.date.str<-paste0(eyear, "-12-31")
start.date<-as.Date(start.date.str, "%Y-%m-%d")
end.date<-as.Date(end.date.str, "%Y-%m-%d")
period<-as.character(seq(start.date, end.date, by=1))
length(readLines("W:/Namoi/AWRAR/AWRAR_BL_401/simulation/v00/NAM/419003_states_nonrouting.csv"))
library("zoo", lib.loc="~/r/win-library/3.3")
library("hydroGOF", lib.loc="~/r/win-library/3.3")
setwd("~/datasc/Programming with R for datasc/RProject1")
my.data <- read.csv("Lab10.csv")
my.data
summary(my.data)
View(my.data)
my.data
nrow(my.data)
ncol(my.data)
data1<-my.data$systolic.bp[my.data$Genotype=="BA"]
data2<-my.data$systolic.bp[my.data$Genotype=="BB"]
testResult <- t.test(data1,data2)
testResult
plot(density(data1))
plot(density(data2))
curve(density(data2))
plot(density(data1))
curve(dnorm(data2),add=TRUE,col="red")
# plot 9 histograms of 12 simulated standard normally distributed numbers. Add the density of the standard normal to the plot with the curve() function.
#as we increase the sample size, the distribution is visibly more normal. Not to say that the low sample sizes did not contains numbers from a normal distribution.
for(i in 1:9){
hist(rnorm(12), probability=TRUE,main=paste("Histogram",i))
curve(dnorm,add=TRUE,col="red",lwd=3)
}
lines(dnorm(data2),add=TRUE,col="red")
lines(density(data2))
plot(density(data1))
my.data <- read.csv("Lab10.csv")
summary(my.data)
nrow(my.data)
ncol(my.data)
data1<-my.data$systolic.bp[my.data$Genotype=="BA"]
data2<-my.data$systolic.bp[my.data$Genotype=="BB"]
testResult <- t.test(data1,data2)
plot(density(data1))
lines(density(data2))
my.data[my.data$Genotype=="BA"]
my.data[my.data$Genotype="BA"]
my.data[my.data$Genotype]
my.data[my.data$Genotype=="BA"]
my.data[my.data$Genotype=="BA",c("Genotype")]
nrow(my.data[my.data$Genotype=="BA",c("Genotype")])
length(my.data[my.data$Genotype=="BA",c("Genotype")])
runif(5,min=1, max=2)
runif(26,min=1, max=2)
data1
testResult <- t.test(runif(26,min=1, max=2),data2)
n1 <- length(my.data[my.data$Genotype=="BA",c("Genotype")])
testResult <- t.test(runif(26,min=1, max=2),data2)
my.new.data<-my.data
my.new.data$Genotype<-"BB"
index.temp<-sample(1:50,n1)
my.new.data$Genotype[index.temp]<-"BA"
new.data1<-my.new.data$systolic.bp[my.new.data$Genotype=="BA"]
new.data2<-my.new.data$systolic.bp[my.new.data$Genotype=="BB"]
t.test(new.data1,new.data2)$statistic
set.seed(1234)
my.new.data<-my.data
my.new.data$Genotype<-"BB"
index.temp<-sample(1:50,n1)
new.data1<-my.new.data$systolic.bp[my.new.data$Genotype=="BA"]
new.data2<-my.new.data$systolic.bp[my.new.data$Genotype=="BB"]
my.new.data$Genotype[index.temp]<-"BA"
t.test(new.data1,new.data2)$statistic
set.seed(1234)
my.new.data<-my.data
my.new.data$Genotype<-"BB"
index.temp<-sample(1:50,n1)
my.new.data$Genotype[index.temp]<-"BA"
new.data1<-my.new.data$systolic.bp[my.new.data$Genotype=="BA"]
new.data2<-my.new.data$systolic.bp[my.new.data$Genotype=="BB"]
t.test(new.data1,new.data2)$statistic
my.new.data<-my.data
my.new.data$Genotype<-"BB"
doone<-function(){
index.temp<-sample(1:50,n1)
my.new.data$Genotype[index.temp]<-"BA"
new.data1<-my.new.data$systolic.bp[my.new.data$Genotype=="BA"]
new.data2<-my.new.data$systolic.bp[my.new.data$Genotype=="BB"]
return(t.test(new.data1,new.data2)$statistic)
}
set.seed(554)
my.t.values<-replicate(100000,doone())
mean((1*(my.t.values)^2>2.027021^2))
